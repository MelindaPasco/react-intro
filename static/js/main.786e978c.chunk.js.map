{"version":3,"sources":["components/task.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","taskName","handleDelete","bind","this","onDelete","index","className","onClick","React","Component","ToDoList","localStorage","toDoList","importList","JSON","parse","console","log","listName","tasksList","value","newTask","handleSubmit","getName","handleDeleteTask","saveList","delList","event","setState","target","newvalue","todoArray","joined","concat","status","splice","listSave","stringify","setItem","alert","clear","window","location","reload","type","placeholder","title","onChange","handleListName","map","task","handleNewTask","handleCreateTask","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.786e978c.chunk.js","sourcesContent":["import React from 'react'\nimport { MdDeleteForever } from \"react-icons/md\"\nimport { MdStars } from \"react-icons/md\"\n\nexport default class Task extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            taskName: \"Task\",\n        }\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleDelete() {\n        \n        this.props.onDelete(this.props.index);\n    }\n\n    render() {\n        return(\n            <div>\n                <MdStars/>\n\n                <p className=\"taskName content\">{this.props.taskName}</p>\n\n                <span className=\"red\"><MdDeleteForever onClick={this.handleDelete}/></span>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport Task from './../components/task';\n \nexport default class ToDoList extends React.Component {\n   constructor(props) {\n        super(props)\n        if (localStorage.toDoList != null) {\n            let importList = JSON.parse(localStorage.toDoList);\n            console.log(importList);\n            this.state = importList\n        } else {\n            this.state = {\n                listName: \"Default To Do List\",\n                tasksList: [\n                    { \n                        taskName : \"titre 1\",\n                    },\n                    { \n                        taskName : \"titre 2\",\n                    },\n                    { \n                        taskName : \"titre 3\",\n                    }\n                ],\n                value: \"\",\n                newTask: \"\",\n            }\n        \n        }\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getName = this.getName.bind(this);\n        this.handleDeleteTask = this.handleDeleteTask.bind(this);\n        this.saveList = this.saveList.bind(this);\n        this.delList = this.delList.bind(this);\n    }\n\n    handleListName(event) {\n        this.setState({\n           listName: event.target.value\n        });\n    }\n\n    handleSubmit() {\n        this.setState({listName: this.state.value});\n    }\n\n    getName(newvalue, index) {\n        let todoArray = this.state.tasksList;\n        todoArray[index].taskName = newvalue;\n        this.setState({\n            tasksList: todoArray\n        })\n    }\n\n    handleNewTask(event) {\n        this.setState({\n           newTask: event.target.value\n        });\n    }\n\n    handleCreateTask () {\n        var joined = this.state.tasksList.concat({taskName: this.state.newTask, status: false})\n        this.setState({\n            tasksList: joined\n        })\n        console.log(joined);\n    }\n\n    handleDeleteTask(index) {\n        let todoArray = this.state.tasksList;\n        todoArray.splice(index, 1);\n        this.setState({\n            tasksList: todoArray\n        })\n        console.log(this.state.tasksList);\n    }\n\n    saveList() {\n        let listSave =  JSON.stringify(this.state);\n        localStorage.setItem(\"toDoList\", listSave);\n        alert(\"List successfully saved in your local storage\")\n        console.log(localStorage);\n    }\n\n    delList() {\n        localStorage.clear(\"toDoList\");\n        console.log(localStorage);\n        window.location.reload();\n    }\n\n\n    render() {\n        return(\n            <div>\n                <h2>{this.state.listName}</h2>\n                <input className=\"title\" type=\"text\" placeholder=\"Rename your To Do List\" value={this.state.title} onChange={this.handleListName.bind(this)}/>\n                \n                <br/>\n                <div className=\"localStorage\">\n                    <button className=\"localSave\" onClick={this.saveList}>Save List</button>\n                    <button className=\"bin\" onClick={this.delList}>Delete List</button>\n                </div>\n\n                {this.state.tasksList.map(\n                   (task, index) => \n                    <div>\n                        <Task\n                        index={index}\n                        taskName={task.taskName} \n                        onDelete={this.handleDeleteTask} \n                        />\n                    </div>\n                )}\n                \n                <input type=\"text\" placeholder=\"new task\" value={this.state.newTask} onChange={this.handleNewTask.bind(this)}/>\n                <button className=\"items\" onClick={this.handleCreateTask.bind(this)}>Add Task</button>\n            </div>            \n        )\n   }\n}\n","import React from 'react';\nimport './App.css';\n\nimport ToDoList from './components/todolist';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <p>\n          Welcome to your To Do list !\n        </p>\n\n        <div>\n          <ToDoList />\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}